import React, { useState } from 'react'
import { useWallet, useAccount, useConnect, useDisconnect, useSignMessage } from '@enclave-hq/wallet-sdk/react'
import { WalletType, ChainType, ConnectedWallet } from '@enclave-hq/wallet-sdk'
import { WalletDetector, getEVMWallets, getTronWallets } from '@enclave-hq/wallet-sdk'
import './App.css'

function App() {
  const { walletManager, connectedWallets, switchPrimaryWallet } = useWallet()
  const { account, isConnected, address, chainId } = useAccount()
  const { connect, connectAdditional, isConnecting, error: connectError } = useConnect()
  const { disconnect, isDisconnecting } = useDisconnect()
  const { signMessage, isSigning, error: signError } = useSignMessage()

  const [messageToSign, setMessageToSign] = useState('Hello from Enclave Wallet SDK!')
  const [signature, setSignature] = useState<string>('')
  const [availableWallets, setAvailableWallets] = useState<any[]>([])
  const [detectionDone, setDetectionDone] = useState(false)
  const [eventLogs, setEventLogs] = useState<Array<{ time: string; type: string; message: string }>>([])

  // Ê∑ªÂä†‰∫ã‰ª∂Êó•Âøó
  const addLog = (type: string, message: string) => {
    const time = new Date().toLocaleTimeString()
    setEventLogs(prev => [{ time, type, message }, ...prev].slice(0, 10)) // Âè™‰øùÁïôÊúÄËøë 10 Êù°
  }

  // Ê£ÄÊµãÈí±ÂåÖ
  const detectWallets = async () => {
    const detector = new WalletDetector()
    
    // ÂÖàÂø´ÈÄüÊ£ÄÊµã‰∏ÄÊ¨°
    let wallets = await detector.detectAllWallets()
    setAvailableWallets(wallets)
    
    // Â¶ÇÊûú TronLink Êú™Ê£ÄÊµãÂà∞ÔºåÁ≠âÂæÖÂπ∂ÈáçËØïÔºàTronLink Ê≥®ÂÖ•ÊòØÂºÇÊ≠•ÁöÑÔºâ
    const tronLinkWallet = wallets.find(w => w.walletType === WalletType.TRONLINK)
    if (!tronLinkWallet?.isAvailable) {
      addLog('Ê£ÄÊµã‰∏≠', 'Á≠âÂæÖ TronLink Âä†ËΩΩ...')
      const isTronLinkAvailable = await detector.waitForWallet(WalletType.TRONLINK, 3000)
      if (isTronLinkAvailable) {
        addLog('Ê£ÄÊµãÊàêÂäü', 'TronLink Â∑≤Â∞±Áª™')
        // ÈáçÊñ∞Ê£ÄÊµãÊâÄÊúâÈí±ÂåÖ
        wallets = await detector.detectAllWallets()
        setAvailableWallets(wallets)
      } else {
        addLog('Ê£ÄÊµãÂ§±Ë¥•', 'TronLink Êú™ÂÆâË£ÖÊàñÊú™ÂêØÁî®')
      }
    }
    
    setDetectionDone(true)
  }

  // ËøûÊé•Èí±ÂåÖ
  const handleConnect = async (type: WalletType) => {
    try {
      await connect(type)
    } catch (error) {
      console.error('Connection error:', error)
    }
  }

  // ËøûÊé•È¢ùÂ§ñÁöÑÈí±ÂåÖ
  const handleConnectAdditional = async (type: WalletType) => {
    try {
      await connectAdditional(type)
    } catch (error) {
      console.error('Connection error:', error)
    }
  }

  // Êñ≠ÂºÄËøûÊé•
  const handleDisconnect = async () => {
    try {
      await disconnect()
      setSignature('')
    } catch (error) {
      console.error('Disconnect error:', error)
    }
  }

  // Á≠æÂêçÊ∂àÊÅØ
  const handleSignMessage = async () => {
    try {
      const sig = await signMessage(messageToSign)
      setSignature(sig)
    } catch (error) {
      console.error('Sign error:', error)
    }
  }

  // ÂàáÊç¢‰∏ªÈí±ÂåÖ
  const handleSwitchPrimary = async (chainType: ChainType) => {
    try {
      await switchPrimaryWallet(chainType)
    } catch (error) {
      console.error('Switch error:', error)
    }
  }

  // ÂàáÊç¢ÈìæÔºà‰ªÖ EVMÔºâ
  const handleSwitchChain = async (newChainId: number) => {
    try {
      await walletManager.requestSwitchChain(newChainId)
    } catch (error) {
      console.error('Chain switch error:', error)
    }
  }

  // ÁõëÂê¨Èí±ÂåÖ‰∫ã‰ª∂
  React.useEffect(() => {
    if (!walletManager) return

    const handleAccountChanged = (newAccount: any) => {
      if (newAccount) {
        addLog('Ë¥¶Êà∑ÂàáÊç¢', `Êñ∞Ë¥¶Êà∑: ${newAccount.nativeAddress.slice(0, 10)}...`)
      } else {
        addLog('Ë¥¶Êà∑Êñ≠ÂºÄ', 'Èí±ÂåÖÂ∑≤Êñ≠ÂºÄÊàñÈîÅÂÆö')
      }
    }

    const handleChainChanged = (chainId: number) => {
      addLog('ÈìæÂàáÊç¢', `ÂàáÊç¢Âà∞Èìæ ID: ${chainId}`)
    }

    const handlePrimaryWalletSwitched = (newPrimary: any, oldPrimary: any, chainType: string) => {
      addLog('‰∏ªÈí±ÂåÖÂàáÊç¢', `‰ªé ${oldPrimary?.chainType || 'N/A'} ÂàáÊç¢Âà∞ ${chainType}`)
    }

    const handleDisconnected = () => {
      addLog('Êñ≠ÂºÄËøûÊé•', 'Èí±ÂåÖÂ∑≤Êñ≠ÂºÄ')
    }

    // Ê≥®ÂÜå‰∫ã‰ª∂ÁõëÂê¨
    walletManager.on('accountChanged', handleAccountChanged)
    walletManager.on('chainChanged', handleChainChanged)
    walletManager.on('primaryWalletSwitched', handlePrimaryWalletSwitched)
    walletManager.on('disconnected', handleDisconnected)

    return () => {
      // Ê∏ÖÁêÜ‰∫ã‰ª∂ÁõëÂê¨
      walletManager.off('accountChanged', handleAccountChanged)
      walletManager.off('chainChanged', handleChainChanged)
      walletManager.off('primaryWalletSwitched', handlePrimaryWalletSwitched)
      walletManager.off('disconnected', handleDisconnected)
    }
  }, [walletManager])

  React.useEffect(() => {
    detectWallets()
  }, [])

  return (
    <div className="App">
      <header className="App-header">
        <h1>üîê Enclave Wallet SDK Demo</h1>
        <p className="subtitle">Multi-chain wallet adapter for EVM & Tron</p>
      </header>

      <main className="App-main">
        {/* Èí±ÂåÖÁä∂ÊÄÅ */}
        <section className="section">
          <h2>üìä Wallet Status</h2>
          <div className="status-card">
            <div className="status-item">
              <span className="label">Status:</span>
              <span className={`value ${isConnected ? 'connected' : 'disconnected'}`}>
                {isConnected ? '‚úÖ Connected' : '‚ùå Not Connected'}
              </span>
            </div>
            {isConnected && account && (
              <>
                <div className="status-item">
                  <span className="label">Address:</span>
                  <span className="value monospace">{address}</span>
                </div>
                <div className="status-item">
                  <span className="label">Chain ID:</span>
                  <span className="value">{chainId}</span>
                </div>
                <div className="status-item">
                  <span className="label">Chain Type:</span>
                  <span className="value">{account.chainType.toUpperCase()}</span>
                </div>
                <div className="status-item">
                  <span className="label">Universal Address:</span>
                  <span className="value monospace small">{account.universalAddress}</span>
                </div>
              </>
            )}
          </div>
        </section>

        {/* Èí±ÂåÖÊ£ÄÊµã */}
        {!isConnected && (
          <section className="section">
            <h2>üîç Available Wallets</h2>
            {!detectionDone && (
              <button onClick={detectWallets} className="btn btn-secondary">
                Detect Wallets
              </button>
            )}
            {detectionDone && (
              <>
                <div className="wallet-grid">
                  <div className="wallet-category">
                    <h3>EVM Wallets</h3>
                    <div className="wallet-buttons">
                      {availableWallets
                        .filter((w) => w.chainType === ChainType.EVM)
                        .map((wallet) => (
                          <button
                            key={wallet.walletType}
                            onClick={() => handleConnect(wallet.walletType)}
                            className={`btn ${wallet.isAvailable ? 'btn-primary' : 'btn-disabled'}`}
                            disabled={!wallet.isAvailable || isConnecting}
                          >
                            {wallet.isAvailable ? '‚úÖ' : '‚ùå'} {wallet.walletType}
                          </button>
                        ))}
                    </div>
                  </div>
                  <div className="wallet-category">
                    <h3>Tron Wallets</h3>
                    <div className="wallet-buttons">
                      {availableWallets
                        .filter((w) => w.chainType === ChainType.TRON)
                        .map((wallet) => (
                          <button
                            key={wallet.walletType}
                            onClick={() => handleConnect(wallet.walletType)}
                            className={`btn ${wallet.isAvailable ? 'btn-primary' : 'btn-disabled'}`}
                            disabled={!wallet.isAvailable || isConnecting}
                          >
                            {wallet.isAvailable ? '‚úÖ' : '‚ùå'} {wallet.walletType}
                          </button>
                        ))}
                    </div>
                  </div>
                </div>
                <button onClick={detectWallets} className="btn btn-secondary" style={{ marginTop: '1rem' }}>
                  üîÑ ÈáçÊñ∞Ê£ÄÊµãÈí±ÂåÖ
                </button>
              </>
            )}
            {connectError && (
              <div className="error-message">Error: {connectError.message}</div>
            )}
          </section>
        )}

        {/* Â∑≤ËøûÊé•ÁöÑÈí±ÂåÖ */}
        {isConnected && connectedWallets.length > 0 && (
          <section className="section">
            <h2>üíº Connected Wallets ({connectedWallets.length})</h2>
            <div className="connected-wallets">
              {connectedWallets.map((wallet) => (
                <div
                  key={wallet.chainType}
                  className={`wallet-card ${wallet.isPrimary ? 'primary' : ''}`}
                >
                  <div className="wallet-card-header">
                    <span className="wallet-type">
                      {wallet.isPrimary && '‚≠ê '}
                      {wallet.walletType} ({wallet.chainType.toUpperCase()})
                    </span>
                    {!wallet.isPrimary && (
                      <button
                        onClick={() => handleSwitchPrimary(wallet.chainType)}
                        className="btn btn-small"
                      >
                        Set as Primary
                      </button>
                    )}
                  </div>
                  <div className="wallet-card-body">
                    <div className="wallet-info">
                      <span className="label">Address:</span>
                      <span className="value monospace small">
                        {wallet.account.nativeAddress}
                      </span>
                    </div>
                    <div className="wallet-info">
                      <span className="label">Chain ID:</span>
                      <span className="value">{wallet.account.chainId}</span>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </section>
        )}

        {/* Á≠æÂêçÊµãËØï */}
        {isConnected && (
          <section className="section">
            <h2>‚úçÔ∏è Sign Message</h2>
            <div className="sign-container">
              <textarea
                value={messageToSign}
                onChange={(e) => setMessageToSign(e.target.value)}
                placeholder="Enter message to sign..."
                rows={3}
                className="textarea"
              />
              <button
                onClick={handleSignMessage}
                disabled={isSigning || !messageToSign}
                className="btn btn-primary"
              >
                {isSigning ? 'Signing...' : 'Sign Message'}
              </button>
              {signature && (
                <div className="signature-result">
                  <strong>Signature:</strong>
                  <code className="signature-value">{signature}</code>
                </div>
              )}
              {signError && (
                <div className="error-message">Error: {signError.message}</div>
              )}
            </div>
          </section>
        )}

        {/* ÈìæÂàáÊç¢Ôºà‰ªÖ EVMÔºâ */}
        {isConnected && account?.chainType === ChainType.EVM && (
          <section className="section">
            <h2>üîÑ Switch Chain (EVM Only)</h2>
            <div className="chain-buttons">
              <button onClick={() => handleSwitchChain(1)} className="btn btn-secondary">
                Ethereum Mainnet (1)
              </button>
              <button onClick={() => handleSwitchChain(56)} className="btn btn-secondary">
                BSC Mainnet (56)
              </button>
              <button onClick={() => handleSwitchChain(137)} className="btn btn-secondary">
                Polygon Mainnet (137)
              </button>
              <button onClick={() => handleSwitchChain(11155111)} className="btn btn-secondary">
                Sepolia Testnet (11155111)
              </button>
            </div>
          </section>
        )}

        {/* ËøûÊé•È¢ùÂ§ñÈí±ÂåÖ */}
        {isConnected && (
          <section className="section">
            <h2>‚ûï Connect Additional Wallet</h2>
            <div className="wallet-buttons">
              {availableWallets
                .filter((w) => !connectedWallets.some((cw) => cw.walletType === w.walletType))
                .map((wallet) => (
                  <button
                    key={wallet.walletType}
                    onClick={() => handleConnectAdditional(wallet.walletType)}
                    className={`btn ${wallet.isAvailable ? 'btn-primary' : 'btn-disabled'}`}
                    disabled={!wallet.isAvailable || isConnecting}
                  >
                    {wallet.isAvailable ? '‚úÖ' : '‚ùå'} {wallet.walletType}
                  </button>
                ))}
            </div>
          </section>
        )}

        {/* Êñ≠ÂºÄËøûÊé• */}
        {isConnected && (
          <section className="section">
            <button
              onClick={handleDisconnect}
              disabled={isDisconnecting}
              className="btn btn-danger"
            >
              {isDisconnecting ? 'Disconnecting...' : 'Disconnect'}
            </button>
          </section>
        )}

        {/* ‰∫ã‰ª∂Êó•Âøó */}
        <section className="section">
          <h2>üì° Event Log (ÂÆûÊó∂ÁõëÂê¨)</h2>
          <div className="event-log">
            {eventLogs.length === 0 ? (
              <p className="event-log-empty">Á≠âÂæÖÈí±ÂåÖ‰∫ã‰ª∂...</p>
            ) : (
              eventLogs.map((log, index) => (
                <div key={index} className={`event-log-item event-${log.type}`}>
                  <span className="event-time">{log.time}</span>
                  <span className="event-type">{log.type}</span>
                  <span className="event-message">{log.message}</span>
                </div>
              ))
            )}
          </div>
          <div className="event-log-hint">
            <p>üí° ÊèêÁ§∫Ôºö</p>
            <ul>
              <li>Âú® MetaMask ‰∏≠ÂàáÊç¢Ë¥¶Êà∑ ‚Üí Ëá™Âä®Ê£ÄÊµãÂπ∂ÊòæÁ§∫</li>
              <li>Âú® MetaMask ‰∏≠ÂàáÊç¢ÁΩëÁªú ‚Üí Ëá™Âä®Ê£ÄÊµãÂπ∂ÊòæÁ§∫</li>
              <li>ÁÇπÂáª"Set as Primary"ÂàáÊç¢‰∏ªÈí±ÂåÖ ‚Üí ÊòæÁ§∫ÂàáÊç¢‰∫ã‰ª∂</li>
            </ul>
          </div>
        </section>
      </main>

      <footer className="App-footer">
        <p>
          Built with{' '}
          <a href="https://github.com/enclave-hq/enclave" target="_blank" rel="noopener noreferrer">
            @enclave-hq/wallet-sdk
          </a>
        </p>
      </footer>
    </div>
  )
}

export default App

